<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Marko Ivankovic and Marina Celar Ivankovic - personal website</title>
    <link>https://www.ivankovic.me/blog/</link>
    <description>Recent content in Blogs on Marko Ivankovic and Marina Celar Ivankovic - personal website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Sep 2016 18:16:49 +0200</lastBuildDate>
    <atom:link href="https://www.ivankovic.me/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The layout and security of my home network</title>
      <link>https://www.ivankovic.me/blog/2016/09/04/the-layout-and-security-of-my-home-network/</link>
      <pubDate>Sun, 04 Sep 2016 18:16:49 +0200</pubDate>
      
      <guid>https://www.ivankovic.me/blog/2016/09/04/the-layout-and-security-of-my-home-network/</guid>
      <description>

&lt;h1 id=&#34;the-layout-and-security-of-my-home-network:6ebf8a256e9904bf4ef1916ea9b0780e&#34;&gt;The layout and security of my home network&lt;/h1&gt;

&lt;p&gt;I wanted to write this post for quite some time now. Mostly to have an opportunity to critically examine my own setup. If someone else finds this useful, that&amp;rsquo;s just extra.&lt;/p&gt;

&lt;p&gt;In this post I will describe the layout and security layers of my entire home network. I personally strongly believe that security can only come from usability, and I will try to point out in this post paths not taken. Paths that would lead to theoretically safer designs that would practically be less safe because they would be unusable.&lt;/p&gt;

&lt;h2 id=&#34;human-considerations:6ebf8a256e9904bf4ef1916ea9b0780e&#34;&gt;Human considerations&lt;/h2&gt;

&lt;p&gt;The most usable security systems are those that don&amp;rsquo;t even have any usability considerations because they have no user interface. These are by definition completely automated and wherever possible such systems will be preferred. Unfortunately, these are also the rarest. The only systems that I am aware of that fit this description are all on Chromebooks. The Chromebook full disk encryption and secure fully automatic updates Just Work. And they don&amp;rsquo;t just work in best case scenario, they &lt;strong&gt;always work&lt;/strong&gt; without any debugging.&lt;/p&gt;

&lt;p&gt;The next level are setup-only UI systems. They require me to invest time up-front to set them up, but once they are set up they require no further interaction ever. A good example of this would be &lt;code&gt;/home&lt;/code&gt; directory encryption on Ubuntu. Some setup is required, but generally once it is set-up, it works. Note that this implies that they are also rock solid and can &lt;strong&gt;never fail&lt;/strong&gt;. Because if they fail, they fall under the class of&amp;hellip;&lt;/p&gt;

&lt;p&gt;Non-periodic interaction systems. Hopefully very very rarely interactive systems. These systems do have a UI, but you interact with it only on-demand when it cannot possibly be avoided. A good example of this is The Master Key. Usually stored as safe as possible behind as many security countermeasures as possible, the only time it gets used is when issuing more specific keys, which in my case is basically only when provisioning a new trusted device on the network. Note that the interaction must be non-periodic. In other words, you cannot ever have this knowingly scheduled in advance, because if you do it isâ€¦&lt;/p&gt;

&lt;p&gt;Scheduled interaction systems. These are all the systems that the users will interact with over and over and over again. Because of this, they must be &lt;strong&gt;incredibly fast&lt;/strong&gt; and &lt;strong&gt;easy to use&lt;/strong&gt;. Logging in to a laptop falls under this, as does the yearly rotation of PGP keys. Note that within this class there are definite subclasses based on the period of the interaction. Something you do every day must be as frictionless as possible, but also requires less documentation and instructions. On the other hand, something done once per year can be a bit more complex, but must be documented very very well because you are likely to forget it.&lt;/p&gt;

&lt;h2 id=&#34;use-cases-and-classes-of-devices-on-the-network:6ebf8a256e9904bf4ef1916ea9b0780e&#34;&gt;Use cases and classes of devices on the network&lt;/h2&gt;

&lt;p&gt;The network consists of the following classes of devices and the supported use cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chromebooks and Androids&lt;/strong&gt; - I group the two together because most Android apps talk to &amp;ldquo;The Cloud&amp;rdquo; using &lt;code&gt;http&lt;/code&gt;, or hopefully &lt;code&gt;https&lt;/code&gt;, so from the perspective of the network they are very similar. These are also the devices that are used most of the time.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Smart TV and Sonos audio system&lt;/strong&gt; - These two are grouped together because I can&amp;rsquo;t fucking trust them. They are completely closed source and could be doing anything, so the network must isolate them and treat them as semi-hostile elements at all times.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;NAS&lt;/strong&gt; - Basically dumb storage nodes. Everything that lands on them should be encrypted or to be shared with the entertainment system anyhow and they should only store things with appropriate replication.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Small home servers&lt;/strong&gt; - I have a couple of RPis that I use as various servers in my home network. Things like SSH from outside, git repositories, media servers.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Physical security&lt;/strong&gt; - I have a couple of RPis running as security cameras.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Network infrastructure&lt;/strong&gt; - An Asus RT-AC68U running open source firmware and a cable modem + router combination I got from the ISP.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;physical-layer:6ebf8a256e9904bf4ef1916ea9b0780e&#34;&gt;Physical layer&lt;/h2&gt;

&lt;p&gt;Any attacks on the physical layer would require the attacker to be in close physical proximity to the network. I have a door. I have custom made RPi security cameras.&lt;/p&gt;

&lt;h2 id=&#34;link-layer:6ebf8a256e9904bf4ef1916ea9b0780e&#34;&gt;Link layer&lt;/h2&gt;

&lt;p&gt;MAC address leaks. The one I am really worried about here is the ISP provided router. So I keep that one segregated behind the RT-AC68U.&lt;/p&gt;

&lt;p&gt;I guess the smart TV, Sonos and all the other closed source elements can also be collecting MAC addresses and phoning them home, but since I need to connect to those in order for them to function at all there&amp;rsquo;s not much one can do at this layer.&lt;/p&gt;

&lt;p&gt;Of course, I also leak the addresses over WiFi, but that requires physical proximity.&lt;/p&gt;

&lt;p&gt;A funny attack here is the ISP router recognizing this situation and silently sniffing the WiFi traffic around it. Which is why I have it in a metal box bricked into the armed concrete wall, with the antennas screwed out.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not that worried about DoS attacks at link layer, like table exhaustions. Those can happen because of accidents as well and I expect the router software to mostly have those patched at this point. And if they don&amp;rsquo;t, I can just reboot the whole thing if need be.&lt;/p&gt;

&lt;h2 id=&#34;internet-and-transport-layer:6ebf8a256e9904bf4ef1916ea9b0780e&#34;&gt;Internet and transport layer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m still waiting for IPv6 :(&lt;/p&gt;

&lt;p&gt;Before that happens, not much. The NAT between the WAN and LAN helps keep things segregated quite a bit. For defense in depth I also map the externally accessible port on the NAT to a random port. Doesn&amp;rsquo;t stop a dedicated, provisioned or adept attacker but it does stop random people that go around scanning port 22 and 80.&lt;/p&gt;

&lt;p&gt;I did purposefully host my personal website on a server rather than from my home so I don&amp;rsquo;t expose my external IP address, so there&amp;rsquo;s that.&lt;/p&gt;

&lt;p&gt;I considered IPSec and might revisit the decision in the future but for now, it&amp;rsquo;s more trouble than it&amp;rsquo;s worth.&lt;/p&gt;

&lt;h2 id=&#34;application-layer:6ebf8a256e9904bf4ef1916ea9b0780e&#34;&gt;Application layer&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s where the fun starts. On all devices that I completely control I try to reduce the application layer to only two endpoints: SSH and HTTPS.&lt;/p&gt;

&lt;p&gt;Note that both SSH and HTTPS secure my information even if the underlying network is outright hostile. Defense in depth.&lt;/p&gt;

&lt;h3 id=&#34;https:6ebf8a256e9904bf4ef1916ea9b0780e&#34;&gt;HTTPS&lt;/h3&gt;

&lt;p&gt;HTTPS is used for end to end encryption of all &amp;ldquo;nice UI&amp;rdquo; parts of the network, like the camera dashboard. I use &lt;a href=&#34;https://www.ivankovic.me/blog/2014/04/12/encrypting-access-to-all-local-web-consoles-using-nginx-as-reverse-ssl-proxy/&#34;&gt;Nginx as a reverse SSL proxy&lt;/a&gt; which allows me to encrypt any tool with a web UI.&lt;/p&gt;

&lt;p&gt;I use a private root certificate to issue SSL certificates for all trusted devices, &lt;strong&gt;including smartphones and Chromebooks&lt;/strong&gt;, which conveniently allows me to set up 2-way SSL.&lt;/p&gt;

&lt;p&gt;This means that my actual useful information is secure even if someone obtains unauthorized access to my private network, even active access to the network infrastructure like the router.&lt;/p&gt;

&lt;p&gt;This also means that I could even expose the HTTPS endpoints to the Internet and access them over crappy hotspot networks and still be OK. Of course I don&amp;rsquo;t actually do this, because it would leak some metadata, but I could make this usability choice if I wanted to.&lt;/p&gt;

&lt;h3 id=&#34;ssh:6ebf8a256e9904bf4ef1916ea9b0780e&#34;&gt;SSH&lt;/h3&gt;

&lt;p&gt;SSH is my control channel. I mostly use it for settings and configuration. Ideally very rarely.&lt;/p&gt;

&lt;p&gt;I have the standard set of precautions in place.&lt;/p&gt;

&lt;p&gt;I &lt;a href=&#34;https://www.ivankovic.me/blog/2013/11/26/how-to-pick-the-best-non-standard-port-for-ssh-or-other-services/&#34;&gt;run SSH on a non-standard port&lt;/a&gt;, &lt;a href=&#34;blog/2014/05/28/using-ssh-config-file-to-simplify-swarm-management/&#34;&gt;using a config&lt;/a&gt; to counteract the usability loss.&lt;/p&gt;

&lt;p&gt;I only allow public key logins, and I use the shiny new &lt;a href=&#34;https://en.wikipedia.org/wiki/EdDSA&#34;&gt;Ed25519&lt;/a&gt; which probably makes the passphrase the weakest link of the entire scheme.&lt;/p&gt;

&lt;h2 id=&#34;usability:6ebf8a256e9904bf4ef1916ea9b0780e&#34;&gt;Usability&lt;/h2&gt;

&lt;p&gt;Almost everything is setup only. Once the keys are distributed on the devices they just work.&lt;/p&gt;

&lt;p&gt;The only non-periodic interaction is entering the SSH key.&lt;/p&gt;

&lt;p&gt;Note that this means that devices that belong to family members get security completely transparently as far as their users are concerned.&lt;/p&gt;

&lt;p&gt;Adding a new device is a rare event (1 / year). For HTTPS it&amp;rsquo;s just provisioning a new certificate and figuring out how to load it on the device. For SSH it&amp;rsquo;s a bit more work to verify the connections as I establish them.&lt;/p&gt;

&lt;p&gt;Rotating the root certificate is a very rare event (0.5 / year) and would require a bit more work to rotate all HTTPS certificates on all devices. Obviously this doesn&amp;rsquo;t impact SSH.&lt;/p&gt;

&lt;h2 id=&#34;next-up:6ebf8a256e9904bf4ef1916ea9b0780e&#34;&gt;Next up&lt;/h2&gt;

&lt;p&gt;Individual device security.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Buildroot directory structure for multiple R-Pi devices</title>
      <link>https://www.ivankovic.me/blog/2016/02/22/buildroot-directory-structure-for-multiple-r-pi-devices/</link>
      <pubDate>Mon, 22 Feb 2016 01:14:28 +0100</pubDate>
      
      <guid>https://www.ivankovic.me/blog/2016/02/22/buildroot-directory-structure-for-multiple-r-pi-devices/</guid>
      <description>

&lt;h1 id=&#34;buildroot-directory-structure-for-multiple-r-pi-devices:325c100223836bce6bc77704f27d5ca3&#34;&gt;Buildroot directory structure for multiple R-Pi devices&lt;/h1&gt;

&lt;p&gt;I have been experimenting with embedded Linux builds on my R-Pi devices for quite some time now. There are at least 3 ways you can do that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.linuxfromscratch.org/&#34;&gt;Linux From Scratch&lt;/a&gt; - Very good for educational value, almost meaningless for multiple devices since it is completely manual and hard to reproduce&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.yoctoproject.org/&#34;&gt;Yocto Project&lt;/a&gt; - Linux foundation project aimed at enabling embedded Linux developement. But it offers a lot more than that and can deal with any target size from tiny (1 package extremely specific use case) to &amp;ldquo;too much&amp;rdquo; (100 packages, basically a full distribution for all intents and purposes). Unfortunately as a side-effect it also has a steep learning curve and just feels bulky.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://buildroot.org/&#34;&gt;Buildroot&lt;/a&gt; - Makefile, menuconfig based simple and efficient tool. It still has a learning curve, but perhaps not as steep as Yocto. And it just feels more elegant.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you might have guessed, after trying them all out, I went with Buildroot and have been using it now for 3-4 months.&lt;/p&gt;

&lt;h2 id=&#34;buildroot:325c100223836bce6bc77704f27d5ca3&#34;&gt;Buildroot&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://buildroot.org/downloads/manual/manual.html&#34;&gt;Buildroot documentation&lt;/a&gt; is reasonably well done and Buildroot &lt;a href=&#34;https://git.busybox.net/buildroot/tree/board/raspberrypi&#34;&gt;supports Raspberry Pi&lt;/a&gt; 1 and 2 out of the box.&lt;/p&gt;

&lt;p&gt;What is less clear however is the directory structure one should use for multiple devices. Now, it&amp;rsquo;s important to note that normal workflow for Buildroot is to clone the Buildroot Git repo, run &lt;code&gt;make menuconfig&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; and so on, and then your image and other results can be found in &lt;code&gt;./output&lt;/code&gt;. Obviously, if you need different images on different devices using the normal workflow would imply multiple clones of the Buildroot depo for no good reason.&lt;/p&gt;

&lt;p&gt;The key to a good directory structure is actually in the manual, but it is very easy to miss! The feature is called &lt;a href=&#34;https://buildroot.org/downloads/manual/manual.html#_building_out_of_tree&#34;&gt;&amp;ldquo;out-of-tree&amp;rdquo; build&lt;/a&gt; and what it does is basically enable you to change the output directory from &lt;code&gt;./output&lt;/code&gt; to something else. As a nice usability bonus, it also creates a small Makefile wrapper in the &amp;ldquo;out-of-tree&amp;rdquo; output directory to avoid the need for passing the directory as an environment variable all the time.&lt;/p&gt;

&lt;h2 id=&#34;directory-structure-for-multiple-devices:325c100223836bce6bc77704f27d5ca3&#34;&gt;Directory structure for multiple devices&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;out-of-tree&amp;rdquo; builds allow for the following structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rpi/
   | buildroot/
   | device-1/
   | device-2/
   | device-3/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which conveniently allows the use of the same Buildroot source tree from each device-X directory.&lt;/p&gt;

&lt;h2 id=&#34;sensitive-material-sidenote:325c100223836bce6bc77704f27d5ca3&#34;&gt;Sensitive material sidenote&lt;/h2&gt;

&lt;p&gt;Another thing you should also consider is to store all cryptographic or otherwise sensitive material completely out from the project structure and move it to an encrypted USB. When you are not actively building the images, there&amp;rsquo;s no need to store that material on the machine.&lt;/p&gt;

&lt;p&gt;You can then easily use &lt;a href=&#34;https://buildroot.org/downloads/manual/manual.html#rootfs-custom&#34;&gt;post-build scripts&lt;/a&gt; to copy the material to the image and &lt;a href=&#34;https://buildroot.org/downloads/manual/manual.html#_customization_emphasis_after_emphasis_the_images_have_been_created&#34;&gt;post-image scripts&lt;/a&gt; to copy the image on an SD card and delete the material away from the workstation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self-hosting a static personal homepage - Security</title>
      <link>https://www.ivankovic.me/blog/2015/12/23/self-hosting-a-static-personal-homepage-security/</link>
      <pubDate>Wed, 23 Dec 2015 23:29:21 +0100</pubDate>
      
      <guid>https://www.ivankovic.me/blog/2015/12/23/self-hosting-a-static-personal-homepage-security/</guid>
      <description>

&lt;h1 id=&#34;self-hosting-a-static-personal-homepage-security:cc763e65dbe54cccb78d1311860964d6&#34;&gt;Self-hosting a static personal homepage - Security&lt;/h1&gt;

&lt;p&gt;I recently switched my website from GitHub pages to an unmanaged VPS. I wanted to enable SSL for my domain and I wanted to experiment with Let&amp;rsquo;s Encrypt.&lt;/p&gt;

&lt;p&gt;I also like to do the occasional exercise in over engineering. This blog post documents the security setup of my homepage.&lt;/p&gt;

&lt;h2 id=&#34;why-vps:cc763e65dbe54cccb78d1311860964d6&#34;&gt;Why VPS&lt;/h2&gt;

&lt;p&gt;I chose an unmanaged VPS because they are &lt;a href=&#34;http://lowendbox.com/&#34;&gt;cheap&lt;/a&gt; and provide good operational isolation. The webpage is now hosted on a separate IP, network and machine from anything else I have so if the web page is under attack I don&amp;rsquo;t have any other problems.&lt;/p&gt;

&lt;p&gt;It does introduce a new actor to the security model, a possibly dodgy VPS provider, but I like the tradeoff. Especially since there are simple technical solutions to solve some of the problems that come from it. vector, the malicious VPS provider. It&amp;rsquo;s a tradeoff I accept, because it&amp;rsquo;s easier to defend against that then against a DDoS that also takes out your personal network connection.&lt;/p&gt;

&lt;h2 id=&#34;static-vs-dynamic:cc763e65dbe54cccb78d1311860964d6&#34;&gt;Static vs dynamic&lt;/h2&gt;

&lt;p&gt;My homepage is 100% static. I use &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; for generation and have hand-crafted CSS and layout optimized to work for command line, desktop UI and mobile.&lt;/p&gt;

&lt;p&gt;This allows me to do quite a few nifty things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I only accept GET and HEAD requests. Nginx has a nifty &lt;code&gt;limit_except GET { deny all; }&lt;/code&gt; directive you can use for that.&lt;/li&gt;
&lt;li&gt;I can store the contents of my homepage on GitHub and automatically import it to the VPS.&lt;/li&gt;
&lt;li&gt;I can diff the contents served by the VPS and those stored on GitHub from a probe device. If they differ, I know that something is up. For extra points I can do this through Tor with a different exit node each time.&lt;/li&gt;
&lt;li&gt;I can set the cache expiration time for all URLs to be very large. This has an interesting side effect of making DDoS a little bit more difficult to perform. A naive DDoS that just uses the user&amp;rsquo;s browser will not work. It&amp;rsquo;s not much, but it is funny. If I didn&amp;rsquo;t also plan to switch my site to SSL, it would actually be a much more interesting interaction since intermediate servers would be able to cache much better, but hey.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;let-s-encrypt:cc763e65dbe54cccb78d1311860964d6&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/h2&gt;

&lt;p&gt;Experimentation with Let&amp;rsquo;s Encrypt and switching my domain to SSL is my motivation for this whole thing. I tried out Let&amp;rsquo;s Encrypt before when it was in closed beta and the UX of the official client was, less than impressive. To be fair, I tried a non-recommended flow trying to issue the certificate manually. This was a mistake.&lt;/p&gt;

&lt;p&gt;So for the VPS, I decided to use &lt;a href=&#34;https://github.com/diafygi/acme-tiny&#34;&gt;acme-tiny&lt;/a&gt; and decided on a fully automated once per month renewal.&lt;/p&gt;

&lt;h2 id=&#34;key-material-op-sec:cc763e65dbe54cccb78d1311860964d6&#34;&gt;Key material op-sec&lt;/h2&gt;

&lt;p&gt;For a fully automatic experience, certain key material has to be stored on the VPS.&lt;/p&gt;

&lt;p&gt;I assume that the VPS provider has full read/write access to the machine. This means that any key material that reaches the machine has to be public or assumed compromised.&lt;/p&gt;

&lt;p&gt;There are 2 private keys needed for a fully automatic Let&amp;rsquo;s Encrypt SSL setup:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The private key of the currently used SSL certificate, also known as the domain key.&lt;/li&gt;
&lt;li&gt;The private key registered with Let&amp;rsquo;s Encrypt that was used to prove ownership of the domain, also known as the account key.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If someone has access to the domain key, they can impersonate the server, passively decrypt all communication between the server and readers or change the response and send arbitrary code to the readers.&lt;/p&gt;

&lt;p&gt;If someone has access to the account key, they can revoke the existing certificate and ask Let&amp;rsquo;s Encrypt for a new one.&lt;/p&gt;

&lt;p&gt;Because I want fully automatic key renewal, both of these &lt;strong&gt;must&lt;/strong&gt; be on the server and both &lt;strong&gt;must&lt;/strong&gt; be in plain text. So I have to assume that the VPS provider has access to them.&lt;/p&gt;

&lt;p&gt;Since keeping the keys secret is not going to work, I decided instead to focus on detecting malicious behaviour. Turns out, since my homepage is 100% static and the code is also hosted on GitHub, there&amp;rsquo;s not much secret data a passive listener could observe. If a reader was using Tor, the only information gained would be that some machine somewhere accessed a specific web page. This information is so useless we can ignore this attack.&lt;/p&gt;

&lt;p&gt;Now, a more active attacker might choose to send back malicious code. This would be super easy to detect though, because a perfect copy of the page exists on GitHub and my server doesn&amp;rsquo;t set any cookies or use any non-standard headers. All I need to do is have a simple script that will crawl my page once per hour, checksum the results and compare them to a list of well known hashes.&lt;/p&gt;

&lt;p&gt;To make sure the server is not serving the real page only to the probe I hide each probe behind Tor or VPN.&lt;/p&gt;

&lt;h2 id=&#34;ssh:cc763e65dbe54cccb78d1311860964d6&#34;&gt;SSH&lt;/h2&gt;

&lt;p&gt;Of course the server also runs SSH, with the usual precautions: running on non standard port, public key authentication only, using Ed25519. The key is not used on any other server.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not aware of any useful attack anyone could have on this.&lt;/p&gt;

&lt;h2 id=&#34;lower-levels:cc763e65dbe54cccb78d1311860964d6&#34;&gt;Lower levels&lt;/h2&gt;

&lt;p&gt;Of course, defense in depth is a thing so I also have a very strict iptables based firewall that blocks everything except ports 80, 443 and the SSH port.&lt;/p&gt;

&lt;p&gt;Fail2ban connects the firewall to SSH and Nginx.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing SSL client certificate on Android</title>
      <link>https://www.ivankovic.me/blog/2015/08/20/installing-ssl-client-certificate-on-android/</link>
      <pubDate>Thu, 20 Aug 2015 01:08:07 +0200</pubDate>
      
      <guid>https://www.ivankovic.me/blog/2015/08/20/installing-ssl-client-certificate-on-android/</guid>
      <description>

&lt;h1 id=&#34;installing-ssl-client-certificate-on-android:4e2274b7ab8411fadd6a472888956c1d&#34;&gt;Installing SSL client certificate on Android&lt;/h1&gt;

&lt;p&gt;This is just a quick tip for anyone who is trying to install client SSL certificates on Android devices.&lt;/p&gt;

&lt;p&gt;First, make sure you follow &lt;a href=&#34;https://support.google.com/nexus/answer/2844832?hl=en&#34;&gt;this Google support page&lt;/a&gt;. Pay particular attention to the file &lt;em&gt;extension&lt;/em&gt;. If you have a &lt;a href=&#34;https://en.wikipedia.org/wiki/PKCS_12&#34;&gt;PKCS 12&lt;/a&gt; formatted file, it &lt;strong&gt;must end in &lt;code&gt;.p12&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next, make sure you download the certificate on the internal memory. Google Drive, Dropbox, your own personal cloud or any other network storage &lt;em&gt;will not work&lt;/em&gt;. And the worst thing is, it will look like it works since you can select the folders in the file chooser, and it doesn&amp;rsquo;t give you any errors. But the certificate files will be &lt;em&gt;greyed out and you will not be able to select it&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Last, &lt;strong&gt;don&amp;rsquo;t click on any shortcuts in the file chooser&lt;/strong&gt;. Go through &amp;ldquo;Internal Storage&amp;rdquo; -&amp;gt; &amp;ldquo;Downloads&amp;rdquo;. Otherwise the certificate file will simply be greyed out and you will not be able to select it!!&lt;/p&gt;

&lt;p&gt;So there&amp;rsquo;s that. I spent waaaay to much time figuring this one out. I&amp;rsquo;m leaving the note here in the hope that some other poor soul will find it in their hour of need.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>go-config - Go library for text file based configuration</title>
      <link>https://www.ivankovic.me/blog/2015/03/06/go-config-go-library-for-text-file-based-configuration/</link>
      <pubDate>Fri, 06 Mar 2015 22:55:30 +0000</pubDate>
      
      <guid>https://www.ivankovic.me/blog/2015/03/06/go-config-go-library-for-text-file-based-configuration/</guid>
      <description>

&lt;h1 id=&#34;go-config-go-library-for-text-file-based-configuration:567eb8a85f7be3e1831957b8a14fb757&#34;&gt;Go-config - Go library for text file based configuration&lt;/h1&gt;

&lt;p&gt;I just open-sourced a Go library for text file based configuration: &lt;a href=&#34;https://github.com/ivankovic/go-config&#34;&gt;go-config&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;format:567eb8a85f7be3e1831957b8a14fb757&#34;&gt;Format&lt;/h2&gt;

&lt;p&gt;The format the library supports is a limited subset of the &lt;a href=&#34;http://en.wikipedia.org/wiki/INI_file&#34;&gt;.INI format&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;key=value
# Comment
[section]
key=value
key=returned_value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It supports sections, key value pairs, &lt;code&gt;global&lt;/code&gt; section and # line comments. It doesn&amp;rsquo;t support any escaping, in-line comments or semicolon comments. Duplicate names are ok. The last value will be used.&lt;/p&gt;

&lt;p&gt;The library is also read-only at the moment. In the future I might implement write support.&lt;/p&gt;

&lt;h2 id=&#34;usage:567eb8a85f7be3e1831957b8a14fb757&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ivankovic/go-config/blob/master/config/config_test.go#L8&#34;&gt;It&amp;rsquo;s really simple to use&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/ivankovic/go-config/config&amp;quot;

...

x := config.Load(&amp;quot;/path/to/config&amp;quot;)
v := x.Get(&amp;quot;section&amp;quot;, &amp;quot;key&amp;quot;, &amp;quot;default_value&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;testing:567eb8a85f7be3e1831957b8a14fb757&#34;&gt;Testing&lt;/h2&gt;

&lt;p&gt;The library itself is well tested. But perhaps more importantly, any code &lt;em&gt;using&lt;/em&gt; the library is easy to test. You can create fully in-memory fake configs just by doing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c := config.Config{
    sections: map[string]config.Section{
      &amp;quot;section_name&amp;quot;:config.Section{
        values: map[string]string{
          &amp;quot;key&amp;quot;: &amp;quot;value&amp;quot;,
        }
      },
    },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see a more &lt;a href=&#34;https://github.com/ivankovic/go-config/blob/master/config/config_test.go#L62&#34;&gt;concrete example here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A nice directory structure for Go code</title>
      <link>https://www.ivankovic.me/blog/2015/02/18/a-nice-directory-structure-for-go-code/</link>
      <pubDate>Wed, 18 Feb 2015 20:59:50 +0000</pubDate>
      
      <guid>https://www.ivankovic.me/blog/2015/02/18/a-nice-directory-structure-for-go-code/</guid>
      <description>

&lt;h1 id=&#34;a-nice-directory-structure-for-go-code:66e9facd3641635f7e0e15acfb12cb3b&#34;&gt;A nice directory structure for Go code&lt;/h1&gt;

&lt;p&gt;I recently discovered the wonders of &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt;. I have been using it at work, on the Raspberry Pi and to solve competitive programming problems on &lt;a href=&#34;https://projecteuler.net/profile/markoivankovic.png&#34;&gt;Project Euler&lt;/a&gt;. I even tried out my hand at &lt;a href=&#34;https://github.com/ivankovic/go-competitive&#34;&gt;open sourcing&lt;/a&gt; some Go code on GitHub. And I found it really really fun to use in all these situations.&lt;/p&gt;

&lt;p&gt;One of the things I like the most about Go is how easy it is to reuse code across projects. The &lt;code&gt;go get&lt;/code&gt; and &lt;code&gt;go install&lt;/code&gt; commands are the best thing since distributed version control systems were invented and the automatic import fetching is just crazy.&lt;/p&gt;

&lt;p&gt;However, I did struggle with one thing initially. Because Go depends a lot on the path structure of your workspace(s?) it was not immediately clear to me what workspace structure would work best for such an eclectic collection of projects. But I think that now I have found one that works really really well.&lt;/p&gt;

&lt;h2 id=&#34;number-of-workspaces:66e9facd3641635f7e0e15acfb12cb3b&#34;&gt;Number of workspaces&lt;/h2&gt;

&lt;p&gt;The obvious first question is: &amp;ldquo;One workspace per project or one big global workspace?&amp;rdquo;. I have found that one big global workspace is a much better choice here. Unless you have other requirements that would force you to have a clean separation between sets of projects, for example having to separate work and private code, there are only upsides to having one global workspace.&lt;/p&gt;

&lt;p&gt;It makes code reuse easier: You have one version of code and that one is used everywhere. No need to cross-import common code.
It reduces mental overhead: No need to keep track of which workspace you are in. There&amp;rsquo;s only one.
It reduces management overhead: Just one root directory to back up, just one root directory to secure.&lt;/p&gt;

&lt;h2 id=&#34;directory-structure:66e9facd3641635f7e0e15acfb12cb3b&#34;&gt;Directory structure&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s remind ourselves of the directory structure Go already has built in:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Source code lives under &lt;code&gt;/src&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Compiled binaries live under &lt;code&gt;/bin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Package objects live under &lt;code&gt;/pkg&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The package name (that appears on the first line of each go file) must be the &lt;strong&gt;last&lt;/strong&gt; element of the package path, unless the file is an executable command in which case it must use &lt;code&gt;package main&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;All files in one package must use the same package name.&lt;/li&gt;
&lt;li&gt;If the import path starts with &lt;code&gt;&amp;lt;location&amp;gt;.&amp;lt;vcs&amp;gt;/&lt;/code&gt;, where &lt;code&gt;&amp;lt;vcs&amp;gt;&lt;/code&gt; is one of &lt;code&gt;.bzr&lt;/code&gt;, &lt;code&gt;.git&lt;/code&gt;, &lt;code&gt;.hg&lt;/code&gt; or &lt;code&gt;.svn&lt;/code&gt;, then Go will use the appropriate version control system to fetch the repository from &lt;code&gt;&amp;lt;location&amp;gt;&lt;/code&gt;. Note that &lt;code&gt;&amp;lt;location&amp;gt;&lt;/code&gt; in this context is usually of the form &lt;code&gt;&amp;lt;domain&amp;gt;/&amp;lt;path&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For the 5 popular built-in repositories a custom shorter syntax is built-in.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The built-in repositories are interesting here because we either need to follow their structure or live with inconsistencies. Luckily the structure they use is really good and we can easily copy it for all our code. The built-in repositories almost all use the following structure: &lt;code&gt;&amp;lt;domain&amp;gt;/&amp;lt;username&amp;gt;/&amp;lt;project&amp;gt;/&lt;/code&gt;, with the exception of &lt;code&gt;code.google.com&lt;/code&gt; that doesn&amp;rsquo;t have the &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What is really cool is that we can have almost the same structure with other repositories. The only thing you need to do is choose the level of granularity for you version control system. If you have multiple users and wish to give each user exactly one repository, you would use the following structure: &lt;code&gt;&amp;lt;domain&amp;gt;/&amp;lt;user&amp;gt;.&amp;lt;vcs&amp;gt;/&amp;lt;project&amp;gt;&lt;/code&gt;. If you want each user to have one repository per project, you would use the following structure:
&lt;code&gt;&amp;lt;domain&amp;gt;/&amp;lt;user&amp;gt;/&amp;lt;project&amp;gt;.&amp;lt;vcs&amp;gt;/&lt;/code&gt;. If you just want one giant repository, you can use &lt;code&gt;&amp;lt;domain&amp;gt;/.&amp;lt;vcs&amp;gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This leaves just one thing: local files. I find it helps to have a &lt;code&gt;local/&lt;/code&gt; path that mostly contains just one file &lt;code&gt;main.go&lt;/code&gt;. Whenever I need to script a one-off real quick, I just modify this file, run it and move on. Very rarely, I&amp;rsquo;ll &lt;code&gt;cp&lt;/code&gt; that file and have &lt;code&gt;main2.go&lt;/code&gt; and so on.&lt;/p&gt;

&lt;h2 id=&#34;packages:66e9facd3641635f7e0e15acfb12cb3b&#34;&gt;Packages&lt;/h2&gt;

&lt;p&gt;Because each time you import something you need to type the whole path, I strongly recommend you limit the subpackage depth. Since you always have &lt;code&gt;&amp;lt;project&amp;gt;&lt;/code&gt; as part of your path, usually you can just have all packages directly in the project directory. If you need subpackages, consider instead extracting them into a separate project. After all, you might reuse them somewhere else!&lt;/p&gt;

&lt;h2 id=&#34;real-example:66e9facd3641635f7e0e15acfb12cb3b&#34;&gt;Real example&lt;/h2&gt;

&lt;p&gt;This is the current structure of my Go workspace:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workspace/
         | bin/
         | pkg/
         | src/
              | github.com/ivankovic/go-competitive/&amp;lt;packages&amp;gt;/*.go          
              | ivankovic.me/
                            | projecteuler.git/*.go
                            | swarm.git/&amp;lt;packages&amp;gt;/*.go
              | local/main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s all there is to it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SwarmCast: Autostart Tmux with SSH</title>
      <link>https://www.ivankovic.me/blog/2014/10/14/swarmcast-autostart-tmux-with-ssh/</link>
      <pubDate>Mon, 13 Oct 2014 22:35:37 +0000</pubDate>
      
      <guid>https://www.ivankovic.me/blog/2014/10/14/swarmcast-autostart-tmux-with-ssh/</guid>
      <description>

&lt;h1 id=&#34;swarmcast-autostart-tmux-with-ssh:add7d24c8241e85dfbbdde82f143fb90&#34;&gt;SwarmCast: Autostart Tmux with SSH&lt;/h1&gt;

&lt;p&gt;Maintenance tasks on the RPi Swarm nodes can be a bit of a chore. Of course the idea is to &lt;a href=&#34;http://www.ivankovic.me/blog/2014/04/30/raspberry-pi-swarm-automatically-installing-security-updates/&#34;&gt;automate&lt;/a&gt; as much as possible, but sometimes you just need to do the same exact sequence of commands on all nodes at once.&lt;/p&gt;

&lt;p&gt;Luckily, Tmux combined with SSH (using SSH keys and &lt;a href=&#34;http://www.ivankovic.me/blog/2014/05/28/using-ssh-config-file-to-simplify-swarm-management/&#34;&gt;SSH config&lt;/a&gt;) is just the thing we need.&lt;/p&gt;

&lt;h2 id=&#34;starting-tmux-from-a-bash-script:add7d24c8241e85dfbbdde82f143fb90&#34;&gt;Starting Tmux from a Bash script&lt;/h2&gt;

&lt;p&gt;Tmux has a &lt;a href=&#34;http://manpages.ubuntu.com/manpages/precise/man1/tmux.1.html&#34;&gt;really powerfull set of commands&lt;/a&gt;. They allow you to completely control a Tmux session from a Bash script. In this case, we use it to prepare the window with 4 panes, each one with an SSH session to a different swarm node. At the end it turns &lt;code&gt;synchronize-panes&lt;/code&gt; option on. This will instruct Tmux to send all keystrokes to all windows at once.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

tmux new-session -d -n SwarmCast -s swarmcast &amp;quot;ssh &amp;lt;NODE1&amp;gt;&amp;quot;
tmux split-window &amp;quot;ssh &amp;lt;NODE2&amp;gt;&amp;quot;
tmux split-window -h &amp;quot;ssh &amp;lt;NODE2&amp;gt;&amp;quot;
tmux split-window -h -t 0 &amp;quot;ssh &amp;lt;NODE4&amp;gt;&amp;quot;
tmux set-window-option synchronize-panes 
tmux attach-session -t swarmcast
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One interesting thing to note: if a node fails to connect, it&amp;rsquo;s pane will simply disappear and you can just continue working on the online nodes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Things to remove from a fresh Ubuntu 14.04 install</title>
      <link>https://www.ivankovic.me/blog/2014/10/02/things-to-remove-from-a-fresh-ubuntu-14-04-install/</link>
      <pubDate>Thu, 02 Oct 2014 09:00:41 +0000</pubDate>
      
      <guid>https://www.ivankovic.me/blog/2014/10/02/things-to-remove-from-a-fresh-ubuntu-14-04-install/</guid>
      <description>

&lt;h1 id=&#34;things-to-remove-from-a-fresh-ubuntu-14-04-install:2624161211058c1bb2c51ec4e6852024&#34;&gt;Things to remove from a fresh Ubuntu 14.04 install&lt;/h1&gt;

&lt;p&gt;This is a list of things I removed from my fresh Ubuntu 14.04 install.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;account-plugin-facebook account-plugin-flickr account-plugin-google account-plugin-twitter account-plugin-windows-live adium-theme friends unity-lens-video unity-lens-music unity-scope-video-remote unity-scope-zotero unity-scope-openclipart unity-scope-colourlovers unity-scope-guayadeque unity-scope-clementine unity-scope-audacious unity-scope-gmusicbrowser unity-scope-musique unity-scope-gourmet unity-scope-virtualbox unity-scope-video-remote wodim remmina remmina-common rhythmbox rhythmbox-data brasero gnome-sudoku gnome-mahjongg&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;related:2624161211058c1bb2c51ec4e6852024&#34;&gt;Related&lt;/h2&gt;

&lt;p&gt;For a list of things you can remove from a headless Raspberry Pi Raspbian
install click &lt;a href=&#34;http://www.ivankovic.me/blog/2013/09/21/raspberry-pi-list-of-packages-you-can-remove-if-you-only-do-ssh/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guest post on Google testing blog</title>
      <link>https://www.ivankovic.me/blog/2014/07/26/guest-post-on-google-testing-blog/</link>
      <pubDate>Sat, 26 Jul 2014 10:22:08 +0000</pubDate>
      
      <guid>https://www.ivankovic.me/blog/2014/07/26/guest-post-on-google-testing-blog/</guid>
      <description>

&lt;h1 id=&#34;guest-post-on-google-testing-blog:6db0136578487cffd955fb6c3e8dca14&#34;&gt;Guest post on Google testing blog&lt;/h1&gt;

&lt;p&gt;I had a guest post on the &lt;a href=&#34;https://googletesting.blogspot.com&#34;&gt;Google testing blog&lt;/a&gt;:
&lt;a href=&#34;https://googletesting.blogspot.com/2014/07/measuring-coverage-at-google.html&#34;&gt;Measuring coverage at Google&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrating to Hugo</title>
      <link>https://www.ivankovic.me/blog/2014/07/26/migrating-to-hugo/</link>
      <pubDate>Fri, 25 Jul 2014 22:13:55 +0000</pubDate>
      
      <guid>https://www.ivankovic.me/blog/2014/07/26/migrating-to-hugo/</guid>
      <description>

&lt;h1 id=&#34;migrating-to-hugo:d126bc28dea2bc1bfaf186067b73bc29&#34;&gt;Migrating to Hugo&lt;/h1&gt;

&lt;p&gt;I was recently looking around for a new static site generator.
&lt;a href=&#34;http://nanoc.ws/&#34;&gt;Nanoc&lt;/a&gt; is good, but I have never liked the way you specify
URL paths in it. It&amp;rsquo;s run by a relly stand-up guy though, and the Nanoc website
actually links to a &lt;a href=&#34;http://nanoc.ws/about/#similar-projects&#34;&gt;list of simillar project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Going through the &lt;a href=&#34;http://staticsitegenerators.net/&#34;&gt;list&lt;/a&gt; I noticed something
interesting: &lt;a href=&#34;http://hugo.spf13.com/&#34;&gt;Hugo&lt;/a&gt;. It&amp;rsquo;s one of the most starred generators,
and the only top 15 generator built in a compiled language: Go.&lt;/p&gt;

&lt;p&gt;I gave it a try, and was so happy I decided to migrate my webpage completely to it.&lt;/p&gt;

&lt;h2 id=&#34;hugo:d126bc28dea2bc1bfaf186067b73bc29&#34;&gt;Hugo&lt;/h2&gt;

&lt;p&gt;One of the prominent features of Hugo is that it is &lt;strong&gt;fast&lt;/strong&gt;. Really fast. It
recompiles this site in 45 ms. This together with the auto-reload functionality
the builtin webserver helpfully adds to each file means that you can literally
type your content and see th changes appear in the browser in almost real-time.&lt;/p&gt;

&lt;p&gt;However, what really won me over was the &lt;a href=&#34;http://hugo.spf13.com/content/organization&#34;&gt;content organization&lt;/a&gt;. The defaults really make sense, generate pretty URLs and they even provide the ability to easily transition your existing URLs by using &lt;a href=&#34;http://hugo.spf13.com/extras/aliases&#34;&gt;aliases&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not completely without it&amp;rsquo;s problems. Because it&amp;rsquo;s relatively new, the documentation can sometimes be a bit lacking. It took me a week to figure out &lt;em&gt;exactly&lt;/em&gt; how it chooses a template for a specific URL.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Remote administration node - reverse SSH setup</title>
      <link>https://www.ivankovic.me/blog/2014/06/15/remote-administration-node-reverse-ssh-setup/</link>
      <pubDate>Sun, 15 Jun 2014 10:00:00 +0000</pubDate>
      
      <guid>https://www.ivankovic.me/blog/2014/06/15/remote-administration-node-reverse-ssh-setup/</guid>
      <description>

&lt;h1 id=&#34;remote-administration-node-reverse-ssh-setup:9ce7122a7de8d3ee1521678ff2c3c18b&#34;&gt;Remote administration node - reverse SSH setup&lt;/h1&gt;

&lt;p&gt;Sometimes you just need to remotely administer a network 1000 kilometers away. &lt;a href=&#34;http://tvtropes.org/pmwiki/pmwiki.php/Main/CrazyPrepared&#34;&gt;Thinking ahead&lt;/a&gt; can save you a lot of headache in this situation.&lt;/p&gt;

&lt;p&gt;A R-PI node connected to the remote network can open a &lt;a href=&#34;http://en.wikipedia.org/wiki/Reverse_connection&#34;&gt;reverse SSH tunnel&lt;/a&gt; back to you.&lt;/p&gt;

&lt;h2 id=&#34;reverse-ssh-tunnel-setup:9ce7122a7de8d3ee1521678ff2c3c18b&#34;&gt;Reverse SSH tunnel setup&lt;/h2&gt;

&lt;p&gt;Because one of the devices is in a physically remote location you &lt;strong&gt;should not reuse any cryptographic materials&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You should create a new restricted user on the server. When creating the user, remember to &lt;strong&gt;change the login shell to &lt;code&gt;/bin/false&lt;/code&gt;&lt;/strong&gt;. This user is only used for port forwarding so thereâ€™s no need for a login shell, and if the ssh key ever falls into the wrong hands, the damage they can do is limited.&lt;/p&gt;

&lt;p&gt;On the remote device, &lt;a href=&#34;https://wiki.archlinux.org/index.php/SSH_Keys#Generating_an_SSH_key_pair&#34;&gt;create a new SSH keypair&lt;/a&gt;. Because you will not be there to type the password, the key should be passwordless. Because of this potential vulnerability, this SSH key should only ever be used for the newly created locked down user. You can now copy this key to the newly created user on the server. Itâ€™s also probably a good idea to have a key that works the other way, allowing you to connect to the remote device without a password.&lt;/p&gt;

&lt;p&gt;Once you have copied the keys, try connecting to the server from the remote device. If this works, you can set up an entry in the &lt;code&gt;~/.ssh/config&lt;/code&gt; file to simplify further config. The important options are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;RemoteForward&lt;/code&gt; - This sets up port forwarding. The format is &lt;code&gt;&amp;lt;port on server&amp;gt; localhost:&amp;lt;ssh port&amp;gt;&lt;/code&gt;. For &lt;code&gt;&amp;lt;port on server&amp;gt;&lt;/code&gt; you should choose a high enough, random port. This port &lt;strong&gt;doesnâ€™t need to be exposed externally&lt;/strong&gt;. You can safely &lt;a href=&#34;http://www.ivankovic.me/blog/2013/11/09/basic-network-security-setup-for-rpi.html&#34;&gt;firewall&lt;/a&gt; them on both the server and the remote device.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ServerAliveInterval&lt;/code&gt; - Because this is a long living connection with no traffic, itâ€™s good to send a null packet every now and then. Once every 60 seconds will do.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;ServerAliveCountMax&lt;/code&gt; - On the other hand, if some (for example 2) of these null packets donâ€™t make it, assume that the connection is dead.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, try out your config. Initiate the SSH tunnel from the remote device. You should now be able to SSH to &lt;code&gt;localhost:&amp;lt;port on server&amp;gt;&lt;/code&gt; on the server itself and get the login prompt for the remote device.&lt;/p&gt;

&lt;h2 id=&#34;automatic-ssh-on-startup:9ce7122a7de8d3ee1521678ff2c3c18b&#34;&gt;Automatic SSH on startup&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.harding.motd.ca/autossh/&#34;&gt;autossh&lt;/a&gt; is a nice little program that will start an SSH session and monitor it, restarting it as necessary. Thereâ€™s a &lt;a href=&#34;https://packages.debian.org/wheezy/autossh&#34;&gt;Debian package&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can add it to &lt;code&gt;rc.local&lt;/code&gt; to make sure it start on every boot. A simple &lt;code&gt;autossh -M 0 -f -N &amp;lt;host&amp;gt;&lt;/code&gt; will do. For extra points, use &lt;code&gt;su -c autossh -M 0 -f -N &amp;lt;host&amp;gt; &amp;lt;username&amp;gt; &amp;amp;&lt;/code&gt; to run it as an unprivileged user.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using SSH config file to simplify swarm management</title>
      <link>https://www.ivankovic.me/blog/2014/05/28/using-ssh-config-file-to-simplify-swarm-management/</link>
      <pubDate>Wed, 28 May 2014 10:00:00 +0000</pubDate>
      
      <guid>https://www.ivankovic.me/blog/2014/05/28/using-ssh-config-file-to-simplify-swarm-management/</guid>
      <description>

&lt;h1 id=&#34;using-ssh-config-file-to-simplify-swarm-management:39f07bb5d89bfecb462d92772db06fea&#34;&gt;Using SSH config file to simplify Swarm management&lt;/h1&gt;

&lt;p&gt;While the whole point of having a swarm of devices is to automate things as much as possible, sometimes you just have to SSH into some, or all, of them. Increasing security by using &lt;a href=&#34;http://www.ivankovic.me/blog/2013/11/26/how-to-pick-the-best-non-standard-port-for-ssh-or-other-services.html&#34;&gt;non-standard ports&lt;/a&gt; will cause some usability problems though. Itâ€™s really easy to work around it using a bit of config.&lt;/p&gt;

&lt;h2 id=&#34;ssh-config:39f07bb5d89bfecb462d92772db06fea&#34;&gt;.ssh/config&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://linux.die.net/man/5/ssh_config&#34;&gt;&lt;code&gt;.ssh/config&lt;/code&gt;&lt;/a&gt; is a fantastic little file. The most important declaration you need to know is &lt;code&gt;Host&lt;/code&gt; because it restricts the all other declarations to the host names that match the specified pattern.&lt;/p&gt;

&lt;p&gt;I personally use just two types of patterns:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;One or two letters or numbers. Because Host patterns match the address specified on the command line, if you create a one letter Host declaration and then give it a HostName declaration that points to a commonly used address it enables you to connect to that host using only a single letter. For example the following setting:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Host r
 HostName rpi.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will enable you to connect to rpi.local just by typing ssh r.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;quot;? , ??&amp;quot;&lt;/code&gt; verbatim. This is the catch-all pattern for all one or two letter hosts. Here I can easily specify the non-standard port and the user name. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Host ? , ??
 Port 1922
 User random
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because the settings that come first take precedence, the &lt;code&gt;Host ? , ??&lt;/code&gt; declaration should be at the end of the file.&lt;/p&gt;

&lt;p&gt;Be careful when using &lt;code&gt;*&lt;/code&gt; as a pattern. This will match &lt;strong&gt;everything&lt;/strong&gt;, so if you specify a non-standard port here it will make connecting to standard SSH servers on the internet very annoying.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Saving 20ma on each RPi node</title>
      <link>https://www.ivankovic.me/blog/2014/05/01/saving-20ma-on-each-rpi-node/</link>
      <pubDate>Thu, 01 May 2014 12:00:00 +0000</pubDate>
      
      <guid>https://www.ivankovic.me/blog/2014/05/01/saving-20ma-on-each-rpi-node/</guid>
      <description>

&lt;h1 id=&#34;saving-20ma-on-each-r-pi-node:90a59cf6fa441910a7e8f64fd211bb81&#34;&gt;Saving 20mA on each R-PI node&lt;/h1&gt;

&lt;p&gt;Most nodes in the R-PI swarm donâ€™t have a display device connected to them. So why keep the display device in standby?&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&#34;http://www.daveakerman.com/?page_id=1294&#34;&gt;Dave Akermanâ€™s blog post&lt;/a&gt; the current usage from these is 20mA.&lt;/p&gt;

&lt;p&gt;All you need to do to disable them is run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /opt/vc/bin/tvservice --off
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Donâ€™t forget to add this to your &lt;code&gt;/etc/rc.local&lt;/code&gt; file as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raspberry Pi swarm - Automatically installing security updates</title>
      <link>https://www.ivankovic.me/blog/2014/04/30/raspberry-pi-swarm-automatically-installing-security-updates/</link>
      <pubDate>Wed, 30 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.ivankovic.me/blog/2014/04/30/raspberry-pi-swarm-automatically-installing-security-updates/</guid>
      <description>

&lt;h1 id=&#34;raspberry-pi-swarm-automatically-installing-security-updates:bf8f0fbcb30fa645c12513fccd88bd9a&#34;&gt;Raspberry PI swarm - Automatically installing security updates&lt;/h1&gt;

&lt;p&gt;When the security 0-day hits the fan, you want to update as fast as super humanly possible. &lt;a href=&#34;http://en.wikipedia.org/wiki/Responsible_disclosure&#34;&gt;Responsible disclosure&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/News_embargo&#34;&gt;embargos&lt;/a&gt; on major security updates are fantastic, but if the last mile is not fast enough, you will be targeted by opportunistic internet wide scans.&lt;/p&gt;

&lt;p&gt;Luckily, setting up automatic security updates on Debian is very easy.&lt;/p&gt;

&lt;h2 id=&#34;required-packages:bf8f0fbcb30fa645c12513fccd88bd9a&#34;&gt;Required packages&lt;/h2&gt;

&lt;p&gt;All you need is &lt;a href=&#34;http://en.wikipedia.org/wiki/Anacron&#34;&gt;Anacron&lt;/a&gt; and unnatended-upgrades. Technically you donâ€™t even need anacron, if you are sure all your machines will run &lt;sup&gt;24&lt;/sup&gt;&amp;frasl;&lt;sub&gt;7&lt;/sub&gt;.&lt;/p&gt;

&lt;p&gt;sudo apt-get install anacron unattended-upgrades&lt;/p&gt;

&lt;h2 id=&#34;configuration:bf8f0fbcb30fa645c12513fccd88bd9a&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;You probably donâ€™t need to configure Anacron. You do need to configure unattended-upgrades a bit though.&lt;/p&gt;

&lt;p&gt;There are two main files you need to touch:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/etc/apt/apt.conf.d/50unattended-upgrades&lt;/code&gt; contains general settings for &lt;code&gt;unattended-upgrades&lt;/code&gt;. You probably want to set &lt;code&gt;Unattended-Upgrade::Mail&lt;/code&gt; to your email address.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;/etc/apt/apt.conf.d/02periodic&lt;/code&gt; you probably need to create from scratch. I recommend the following options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; // Enable the update/upgrade script (0=disable)
 APT::Periodic::Enable &amp;quot;1&amp;quot;;


 // Do &amp;quot;apt-get update&amp;quot; automatically every n-days (0=disable)
 APT::Periodic::Update-Package-Lists &amp;quot;1&amp;quot;;


 // Do &amp;quot;apt-get upgrade --download-only&amp;quot; every n-days (0=disable)
 APT::Periodic::Download-Upgradeable-Packages &amp;quot;1&amp;quot;;


 // Run the &amp;quot;unattended-upgrade&amp;quot; security upgrade script
 // every n-days (0=disabled)
 // Requires the package &amp;quot;unattended-upgrades&amp;quot; and will write
 // a log in /var/log/unattended-upgrades
 APT::Periodic::Unattended-Upgrade &amp;quot;1&amp;quot;;


 // Do &amp;quot;apt-get autoclean&amp;quot; every n-days (0=disable)
 APT::Periodic::AutocleanInterval &amp;quot;7&amp;quot;;
 Testing it out
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can run &lt;code&gt;unattended-upgrades&lt;/code&gt; by hand and check the log, by default located at &lt;code&gt;/var/log/unattended-upgrades/unattended-upgrades.log&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can try out Anacron by running &lt;code&gt;anacron -f -n -s -d&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenSCAD patterns and tips</title>
      <link>https://www.ivankovic.me/blog/2014/04/25/openscad-patterns-and-tips/</link>
      <pubDate>Fri, 25 Apr 2014 22:00:00 +0000</pubDate>
      
      <guid>https://www.ivankovic.me/blog/2014/04/25/openscad-patterns-and-tips/</guid>
      <description>

&lt;h1 id=&#34;openscad-patterns-and-tips:0b7e788b536ec9af6360e64c8466b37b&#34;&gt;OpenSCAD patterns and tips&lt;/h1&gt;

&lt;p&gt;I recently started playing around with &lt;a href=&#34;http://www.ivankovic.me/blog/2014/02/15/laser-cut-raspberry-pi-case-with-camera-mount-version-1.html&#34;&gt;laser cutters&lt;/a&gt; and 3D printers. So far, I have learned two major lessons: my &lt;a href=&#34;http://en.wikipedia.org/wiki/Materials_science&#34;&gt;material science&lt;/a&gt; knowledge is lacking and &lt;a href=&#34;http://en.wikipedia.org/wiki/Computer-aided_design&#34;&gt;CAD&lt;/a&gt; tools are not as advanced as Iron Man would have you believe.&lt;/p&gt;

&lt;p&gt;After a bit of searching and trying out, I ended up using &lt;a href=&#34;http://www.openscad.org/index.html&#34;&gt;OpenSCAD&lt;/a&gt; because it fits my programming soul. As with any other programming language, you quickly learn that there are patterns and anti-patterns, so hereâ€™s my list of OpenSCAD patterns and tips.&lt;/p&gt;

&lt;h2 id=&#34;openscad-patterns-and-tips-1:0b7e788b536ec9af6360e64c8466b37b&#34;&gt;OpenSCAD patterns and tips:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Design elements in isolation&lt;/strong&gt;. Think about how the element will fit in the assembled object, but donâ€™t let that influence the parameters of the element itself. Most importantly, assign priorities to axes and stick with it in all your designs. For example, if you are building the left side of a box, design it as if it was the front side. This helps immensely with &lt;a href=&#34;http://en.wikipedia.org/wiki/Constructive_solid_geometry&#34;&gt;constructive solid geometry&lt;/a&gt; of more complex shapes. Itâ€™s also much easier to layout the elements for cutting if they are all in the same plane already.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;As a corollary of 1., &lt;strong&gt;Let the more complex module worry about submodule placement&lt;/strong&gt;. Never fix positioning of a submodule (for example one side of the box) by modifying the submodule, use rotation and translation in the supermodule. This makes it much simpler to have different views, like assembled view, print view, exploded view and so on.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Test your assembled view for overlap&lt;/strong&gt;. If you have overlap in the assembled view, your model is obviously physically impossible (unless you use some weird material that allows for quantum superposition). I have this handy script in a module called &lt;code&gt;testing.scad&lt;/code&gt; and include it for this purpose:&lt;/p&gt;

&lt;p&gt;module test_overlap() {
  if ($children &amp;gt; 1 ) {
    for (i = [0 : $children - 2]) {
      for (j = [i + 1 : $children - 1]) {
        intersection() {
          child(i);
          child(j);
        }
      }
    }
  }
}&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that in the above code I use &lt;code&gt;child()&lt;/code&gt; and not &lt;code&gt;children()&lt;/code&gt; because the current stable OpenSCAD version (2013.06) still uses &lt;code&gt;child()&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Add a small epsilon value to differences&lt;/strong&gt;. Otherwise you are left with a plane of width 0 that can interfere with 3D printing. If you follow tip 1. this epsilon value will almost always be used in the same axis (in my case Y, but to each his own).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Define a variable called exploded and use it in design view&lt;/strong&gt;. Translate all pieces by a multiple of exploded in a direction that makes sense for that piece. This makes it very easy to switch from exploded to assembled view.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If designing for a laser cutter, &lt;strong&gt;define a variable called thickness&lt;/strong&gt; and make sure that changing the thickness of the material doesnâ€™t screw up the design. Use the &lt;code&gt;test_overlap&lt;/code&gt; function from 3. to do this.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>